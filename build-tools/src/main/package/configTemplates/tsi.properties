#
# Configuration file for the UNICORE TSI
#

# The name/address of the system where the UNICORE/X server is executing
# This can be a comma-separated list of names
# Only connection requests from these hosts will be accepted
# (if not using SSL)
tsi.njs_machine=localhost

# The port on which the server is listening for TSI worker connections
# (must match the CLASSICTSI.replyport value in the XNJS configuration file).
tsi.njs_port=7654

# The interface address on which the TSI main process will listen
# for XNJS requests (must match the CLASSICTSI.machine value in the
# XNJS configuration file). Leaving this variable unset will default
# to binding to all interfaces, which can also be achieved by setting
# this to 0.0.0.0 to be more explicit.
tsi.my_addr=0.0.0.0

# The port on which the TSI main process will listen for requests
# (must match the CLASSICTSI.port value in the UNICORE/X configuration).
tsi.my_port=4433

# If set to true then a user's groups will be limited to those 
# available in the operating system (via /etc/groups or LDAP etc.).
# If set to false, then UNICORE/X will be free to assign any groups
# for the user regardless of the operating system settings 
# which allows for more configuration flexibility but limits
# site autonomy. 
tsi.enforce_gids_consistency=true

# If this is setting is "true", the TSI will deny requests from UNICORE/X
# with non-existing groups or (if also tsi.enforce_gids_consistency is
# true) groups that are inconsistent with the OS. If this setting is
# false then TSI won't deny such requests. It will simply ignore bogus
# groups (if primary group is wrong, then it will be replaced by the
# user's default group).
tsi.fail_on_invalid_gids=false

#
# A name to be given to batch jobs if the user does not supply one
# or if the given one is invalid
#
tsi.default_job_name=UnicoreJob

#
# Property string to filter nodes for UNICORE job execution
#
#tsi.nodes_filter=

#
# Log to syslog? 0 = no, 1 = yes
#
tsi.use_syslog=1

#
# Produce debug output? 0 = no, 1 = yes
#
tsi.debug=0


#
# SSL parameters:
#
# NOTE: if tsi.keystore is not defined, SSL will be disabled
#
# tsi.keystore      : file containing the private TSI key
# tsi.keypass       : password for decrypting the key
# tsi.certificate   : file containing the TSI certificate
# tsi.truststore    : file containing the certificate of the CA 
#                     AND the UNICORE/X certificate in PEM format
# tsi.allowed_dn.nn : the DNs of the XNJS servers allowed to connect
# 
# see the TSI manual for more details and examples
#

#tsi.keystore=${tsiInstallDirectory}/conf/tsi-key.pem
#tsi.keypass=the!tsi
#tsi.certificate=${tsiInstallDirectory}/conf/tsi-cert.pem
#tsi.truststore=${tsiInstallDirectory}/conf/tsi-truststore.pem
#tsi.allowed_dn.1=DN1

#
# Location of setfacl and getfacl programs. You can provide a full path
# or use names if the programs should be available under a standard search path.
# If you will comment any of these properties then POSIX ACL won't function.
# 
tsi.setfacl=setfacl
tsi.getfacl=getfacl

#
# Configuration of ACL support is per directory. You can provide as many settings as 
# required. The most specific one will be used. The property should always have  
# the prefix 'tsi.acl.' then directory path and after '=' a value. The valid values 
# are 'POSIX' and 'NONE' respectively for POSIX ACL and for turning off the ACL support. 
# For example:
# 
# tsi.acl./=NONE
# tsi.acl./home=POSIX
# tsi.acl./mnt/apps=POSIX
#
# turns off ACL for directory /tmp ('/' is the most specific), turns POSIX ACL for 
# everything under /home and everything under /mnt/apps. 
# Warning! Do not use symbolic links or '..' or '.' - use only absolute, normalized paths. 
# Currently spaces in paths are also unsupported.
# In future more ACL types may be supported and will be configured here.

tsi.acl./=NONE

# 
# How long (in seconds) the information about users and groups, retrieved 
# from the operating system (LDAP/passwd/...) should be cached.

tsi.usersCacheTtl=600

