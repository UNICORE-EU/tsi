#
# Example configuration file for the UNICORE TSI
#

# The name/address of the system where the XNJS is executing
# This can be a comma-separated list of names
# Only connection requests from these hosts will be accepted
tsi.njs_machine=localhost

# The port on which the server is listening for TSI worker connections
# (must match the CLASSICTSI.replyport value in the XNJS configuration file).
tsi.njs_port=17654

# The interface address on which the TSI shepherd process will listen
# for XNJS requests (must match the CLASSICTSI.machine value in the
# XNJS configuration file). Leaving this variable unset will default
# to binding to all interfaces, which can also be achieved by setting
# this to 0.0.0.0 to be more explicit.
tsi.my_addr=localhost

# The port on which the TSI shepherd process will listen for XNJS requests
# (must match the CLASSICTSI.port value in the XNJS configuration file).
tsi.my_port=14433

# If set to true then groups of the grid user will be limited to those 
# available for the chosen Xlogin as defined in the operating system
# (via /etc/groups or LDAP etc.). If set to false then XNJS will be free
# to assign any groups for the user regardless of the operating system 
# settings what allows for more grid configuration flexibility but limits
# site autonomy. 
#
tsi.enforce_gids_consistency=true

# This option is advanced and rarely changed.
# If it is set to true then TSI will deny requests from XNJS with non-existing groups or
# (if also tsi.enforce_gids_consistency is true) inconsistent groups with OS settings
# for the chosen Xlogin. If this setting is false then TSI won't deny such requests. It 
# will simply ignore bogus groups (if primary group is wrong, then it will be replaced by
# the default OS group for the Xlogin).
#  
tsi.fail_on_invalid_gids=false

#
# A name to be given to batch jobs if the user does not supply one
# or if the given one is invalid
#
tsi.default_job_name=UnicoreJob

#
# Property string to filter nodes for UNICORE job execution
#
#tsi.nodes_filter=

#
# Location of setfacl and getfacl programs. You can provide a full path
# or use names if the programs should be available under a standard search path.
# If you will comment any of these properties then POSIX ACL won't function.
# 
tsi.setfacl=setfacl
tsi.getfacl=getfacl

#
# Configuration of ACL support is per directory. You can provide as many settings as 
# required. The most specific one will be used. The property should always have  
# the prefix 'tsi.acl.' then directory path and after '=' a value. The valid values 
# are 'POSIX' and 'NONE' respectively for POSIX ACL and for turning off the ACL support. 
# For example:
# 
# tsi.acl./=NONE
# tsi.acl./home=POSIX
# tsi.acl./mnt/apps=POSIX
#
# turns off ACL for directory /tmp ('/' is the most specific), turns POSIX ACL for 
# everything under /home and everything under /mnt/apps. 
# Warning! Do not use symbolic links or '..' or '.' - use only absolute, normalized paths. 
# Currently spaces in paths are also unsupported.
# In future more ACL types may be supported and will be configured here.

tsi.acl./=NONE

# 
# How long (in seconds) the information about users and groups, retrieved 
# from the operating system (LDAP/passwd/...) should be cached.

tsi.usersCacheTtl=600

tsi.safe_dir=.
